//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""SwitchTrack"",
            ""id"": ""fec5115d-f0b2-4b89-8dd2-fe8be782be03"",
            ""actions"": [
                {
                    ""name"": ""Track1"",
                    ""type"": ""Button"",
                    ""id"": ""ffa4bbcf-b9d7-439e-9f3c-0e076e083852"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Track2"",
                    ""type"": ""Button"",
                    ""id"": ""9e3d50ac-ae29-477c-8f21-2536d2444a05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Track3"",
                    ""type"": ""Button"",
                    ""id"": ""8229908b-d11f-462c-9bfd-5095b2eff611"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Track4"",
                    ""type"": ""Button"",
                    ""id"": ""fc73ca99-80da-476f-88fa-8d6b582fc0cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6673238-1e29-442a-926b-658103d64720"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Track1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a291169-e2aa-4691-907d-e2adfe3a4302"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Track2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91330917-953d-4a75-a884-3a5f86ab75ff"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Track3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5236dc7-eaa9-42d0-b5cb-3d6f3269f922"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Track4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwitchTrack
        m_SwitchTrack = asset.FindActionMap("SwitchTrack", throwIfNotFound: true);
        m_SwitchTrack_Track1 = m_SwitchTrack.FindAction("Track1", throwIfNotFound: true);
        m_SwitchTrack_Track2 = m_SwitchTrack.FindAction("Track2", throwIfNotFound: true);
        m_SwitchTrack_Track3 = m_SwitchTrack.FindAction("Track3", throwIfNotFound: true);
        m_SwitchTrack_Track4 = m_SwitchTrack.FindAction("Track4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwitchTrack
    private readonly InputActionMap m_SwitchTrack;
    private List<ISwitchTrackActions> m_SwitchTrackActionsCallbackInterfaces = new List<ISwitchTrackActions>();
    private readonly InputAction m_SwitchTrack_Track1;
    private readonly InputAction m_SwitchTrack_Track2;
    private readonly InputAction m_SwitchTrack_Track3;
    private readonly InputAction m_SwitchTrack_Track4;
    public struct SwitchTrackActions
    {
        private @PlayerInputs m_Wrapper;
        public SwitchTrackActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Track1 => m_Wrapper.m_SwitchTrack_Track1;
        public InputAction @Track2 => m_Wrapper.m_SwitchTrack_Track2;
        public InputAction @Track3 => m_Wrapper.m_SwitchTrack_Track3;
        public InputAction @Track4 => m_Wrapper.m_SwitchTrack_Track4;
        public InputActionMap Get() { return m_Wrapper.m_SwitchTrack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchTrackActions set) { return set.Get(); }
        public void AddCallbacks(ISwitchTrackActions instance)
        {
            if (instance == null || m_Wrapper.m_SwitchTrackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwitchTrackActionsCallbackInterfaces.Add(instance);
            @Track1.started += instance.OnTrack1;
            @Track1.performed += instance.OnTrack1;
            @Track1.canceled += instance.OnTrack1;
            @Track2.started += instance.OnTrack2;
            @Track2.performed += instance.OnTrack2;
            @Track2.canceled += instance.OnTrack2;
            @Track3.started += instance.OnTrack3;
            @Track3.performed += instance.OnTrack3;
            @Track3.canceled += instance.OnTrack3;
            @Track4.started += instance.OnTrack4;
            @Track4.performed += instance.OnTrack4;
            @Track4.canceled += instance.OnTrack4;
        }

        private void UnregisterCallbacks(ISwitchTrackActions instance)
        {
            @Track1.started -= instance.OnTrack1;
            @Track1.performed -= instance.OnTrack1;
            @Track1.canceled -= instance.OnTrack1;
            @Track2.started -= instance.OnTrack2;
            @Track2.performed -= instance.OnTrack2;
            @Track2.canceled -= instance.OnTrack2;
            @Track3.started -= instance.OnTrack3;
            @Track3.performed -= instance.OnTrack3;
            @Track3.canceled -= instance.OnTrack3;
            @Track4.started -= instance.OnTrack4;
            @Track4.performed -= instance.OnTrack4;
            @Track4.canceled -= instance.OnTrack4;
        }

        public void RemoveCallbacks(ISwitchTrackActions instance)
        {
            if (m_Wrapper.m_SwitchTrackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwitchTrackActions instance)
        {
            foreach (var item in m_Wrapper.m_SwitchTrackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwitchTrackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwitchTrackActions @SwitchTrack => new SwitchTrackActions(this);
    public interface ISwitchTrackActions
    {
        void OnTrack1(InputAction.CallbackContext context);
        void OnTrack2(InputAction.CallbackContext context);
        void OnTrack3(InputAction.CallbackContext context);
        void OnTrack4(InputAction.CallbackContext context);
    }
}
